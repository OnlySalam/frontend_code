name: "Simple deployment workflow"
on: 
    push: 
        branches: 
            - master
jobs:
    deploy:
        runs-on: ubuntu-latest
        steps: 
            - name: "checksout the repository"
              uses: actions/checkout@v4


            - name: "Log in to Docker"
              uses: docker/login-action@v3
              with: 
                username: ${{ secrets.DOCKERHUB_USERNAME }}
                password: ${{ secrets.DOCKERHUB_PASSWORD }}

            - name: "Resolve the image tag"
              id: tag_generator
              run: |
                echo "deployment_tag=$( git describe --always)" >> $GITHUB_OUTPUT
                echo "image_name=frontend" >> $GITHUB_OUTPUT
                
            
            - name: 'Delete any running container'
              run: |
                sudo docker stop frontend && sudo docker rm frontend
                
            - name: "Remove any images on the system"
              run: |
                sudo docker rmi -f $( sudo docker images -q)
                
            - name: "Build a Docker Image"
              run: |
                sudo docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/${{ steps.tag_generator.outputs.image_name }}:${{ steps.tag_generator.outputs.deployment_tag }} frontend/
              
            - name: "Logs in to Docker Again"
              run: |
                sudo docker login -u ${{ secrets.DOCKERHUB_USERNAME }} -p ${{ secrets.DOCKERHUB_PASSWORD }}
            
            
            - name: "Push the image to Docker Hub"
              run: |
                sudo docker push ${{ secrets.DOCKERHUB_USERNAME }}/${{ steps.tag_generator.outputs.image_name }}:${{ steps.tag_generator.outputs.deployment_tag }} 
                

            - name: Build & Deploy
              env:
                PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
                HOSTNAME: ${{secrets.SSH_HOST}}
                USER_NAME: ${{secrets.USER_NAME}}  
              run: |
                  echo "$PRIVATE_KEY" > private_key && chmod 600 private_key
                  ssh -o StrictHostKeyChecking=no -i private_key ${USER_NAME}@${HOSTNAME} << EOF
                  sudo apt-get update
                  sudo apt-get install ca-certificates curl -y
                  sudo install -m 0755 -d /etc/apt/keyrings 
                  sudo curl -fsSL https://download.docker.com/linux/ubuntu/gpg -o /etc/apt/keyrings/docker.asc
                  sudo chmod a+r /etc/apt/keyrings/docker.asc
                  echo \
                  "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/ubuntu \
                  $(. /etc/os-release && echo "$VERSION_CODENAME") stable" | \
                  sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
                  sudo apt-get update
                  sudo apt-get install docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin -y
                  sudo docker pull ${{ secrets.DOCKERHUB_USERNAME }}/${{ steps.tag_generator.outputs.image_name }}:${{ steps.tag_generator.outputs.deployment_tag }}
                  sudo docker run -d --name frontend_image -p 3000:3000 ${{ secrets.DOCKERHUB_USERNAME }}/${{ steps.tag_generator.outputs.image_name }}:${{ steps.tag_generator.outputs.deployment_tag }}